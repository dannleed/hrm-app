// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  employee      Employee?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Employee {
  id                      String                    @id @default(cuid())
  externalId              EmployeeExternalId[]
  firstName               String
  lastName                String
  middleName              String?
  phone                   EmployeePhone[]
  address                 EmployeeAddress[]
  userId                  String                    @unique
  dateOfBirth             DateTime
  sex                     Sex
  positionId              String
  locationId              String
  child                   EmployeeChild[]
  document                Document[]
  emergencyContact        EmergencyContact[]
  status                  EmployeeStatus
  employeePositionHistory EmployeePositionHistory[]
  employeeLocationHistory EmployeeLocationHistory[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  deletedAt               DateTime?

  location Location       @relation(fields: [locationId], references: [id])
  position Position       @relation(fields: [positionId], references: [id])
  user     User           @relation(fields: [userId], references: [id])
  event    EventVisitor[]
}

model EmployeeExternalId {
  id         String         @id @default(cuid())
  employeeId String
  externalId String
  type       ExternalIdType
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model EmployeePhone {
  id         String    @id @default(cuid())
  number     String
  employeeId String
  deletedAt  DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
}

model EmployeeAddress {
  id         String    @id @default(cuid())
  zipCode    String
  country    String
  city       String
  address    String
  isMain     Boolean   @default(false)
  employeeId String
  deletedAt  DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
}

model EmergencyContact {
  id              String    @id @default(cuid())
  firstName       String
  lastName        String
  middleName      String
  phone           String
  degreeOfKinship String
  employeeId      String
  deletedAt       DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
}

model Position {
  id                      String                    @id @default(cuid())
  name                    String
  description             String?
  Employee                Employee[]
  Salary                  Salary[]
  PositionGroupId         String
  EmployeePositionHistory EmployeePositionHistory[]
  deletedAt               DateTime?

  category PositionGroup @relation(fields: [PositionGroupId], references: [id])
}

model EmployeePositionHistory {
  id         String    @id @default(cuid())
  employeeId String
  positionId String
  startDate  DateTime
  endDate    DateTime?
  deletedAt  DateTime?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  position Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
}

model PositionGroup {
  id           String     @id @default(cuid())
  name         String
  description  String?
  position     Position[]
  permissionId String?
  departmentId String?
  deletedAt    DateTime?

  permission Permission? @relation(fields: [permissionId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])
}

model Department {
  id          String          @id @default(cuid())
  name        String
  description String?
  position    PositionGroup[]
}

model Location {
  id                      String                    @id @default(cuid())
  externalId              String                    @unique
  name                    String
  description             String?
  address                 String
  employees               Employee[]
  employeeLocationHistory EmployeeLocationHistory[]
  locationPhone           LocationPhone[]
  event                   Event[]
  schedule                EventSchedule[]
}

model LocationPhone {
  id         String    @id @default(cuid())
  number     String
  locationId String
  deletedAt  DateTime?

  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model EmployeeLocationHistory {
  id         String    @id @default(cuid())
  employeeId String
  locationId String
  startDate  DateTime
  endDate    DateTime?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Permission {
  id            String          @id @default(cuid())
  name          String
  description   String?
  positionGroup PositionGroup[]
}

model Salary {
  id         String    @id @default(cuid())
  amount     Float
  dateFrom   DateTime
  dateTo     DateTime?
  positionId String

  position Position @relation(fields: [positionId], references: [id])
}

model EmployeeChild {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  middleName  String
  dateOfBirth DateTime
  employeeId  String

  employee Employee @relation(fields: [employeeId], references: [id])
}

model Document {
  id         String       @id @default(cuid())
  documentId String       @unique
  comment    String?
  type       DocumentType
  files      String[]
  employeeId String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
}

model Event {
  id           String          @id @default(cuid())
  name         String
  description  String?
  locationId   String
  deletedAt    DateTime?
  schedule     EventSchedule[]
  eventVisitor EventVisitor[]

  location Location @relation(fields: [locationId], references: [id])
}

model EventVisitor {
  id         String    @id @default(cuid())
  eventId    String
  employeeId String
  scheduleId String
  deletedAt  DateTime?

  schedule EventSchedule @relation(fields: [scheduleId], references: [id])
  employee Employee      @relation(fields: [employeeId], references: [id])
  event    Event         @relation(fields: [eventId], references: [id])
}

model EventSchedule {
  id           String         @id @default(cuid())
  eventId      String
  dateTimeFrom DateTime
  dateTimeTo   DateTime
  locationId   String?
  deletedAt    DateTime?
  eventVisitor EventVisitor[]

  event    Event     @relation(fields: [eventId], references: [id])
  location Location? @relation(fields: [locationId], references: [id])
}

enum DocumentType {
  PASSPORT
  DRIVING_LICENSE
  BIRTH_CERTIFICATE
  TAX_CARD
  MEDICAL_BOOK
  VACCINATION_CARD
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum Sex {
  MALE
  FEMALE
  NOT_SPECIFIED
}

enum EmployeeStatus {
  CANDIDATE
  HIRED
  FIRED
  MATERNITY_LEAVE
}

enum ExternalIdType {
  PREVIOUS_DB_ID
  RKEEPER_ID
  OTHER
}
